{"name":"Drycss","tagline":"Donâ€™t Repeat Yourself writing Cascading Style Sheets","body":"# DryCss\r\nThis is a Css framework written in javascript.\r\n\r\nFor now only the parser will be presented, i'm actually working on it, and then will work on a web gui.\r\n\r\n## What mean dryCss\r\nDRY is an acronym meaning Dont't Repeat Yourself.<br>\r\nIf you're looking at this page i suppose that you already know what Css stand for.\r\n\r\n## What is it ?\r\nThis is a tool to assist you in creating css quicker.\r\n\r\n## What about the syntax\r\nThe syntax is evolving as this project is under heavy development at the moment.\r\n\r\n### Comments\r\nmultiline C style comments as in normal CSS files is supported\r\n\r\nsingle line comments starting with a _//_ is also supported but only when at the begining of the line ( leading spaces are ignored )\r\n\r\n### External file imports\r\n* you can import other files as in normal css using `@import style.css;`\r\n* You may also import file directly inside the current document by doing a `@!import style.dss;` (dss is the common dryCss file extension)\r\n\r\n### Variables\r\nYou can declare variable like this:\r\n```css\r\n@red:#FF0000;\r\n```\r\nand use it anywhere in your code like this:\r\n```css\r\n.red{ color:@red; }\r\n```\r\n### Nested code\r\nAs in most of similar tool you can nest your rules declaration so you can do something like that:\r\n```css\r\na{\r\n  text-decoration:none;\r\n  color:blue;\r\n  // \":pseudo\" class are detected and the result will be \"a:hover\"\r\n  :hover{\r\n    text-decoration:underline;\r\n  }\r\n  // prefixing the rule with a \"!\" allow rendering of \"a.red\" instead of \"a red\"\r\n  !.red{\r\n    color:@red;\r\n  }\r\n  /* this one will result in \"a span\" \r\n     and \"span, !.red\" would give us \"a span, a.red\" */\r\n  span{\r\n    font-size:1.1em;\r\n  }\r\n}\r\n```\r\nWhich will be rendered as \r\n```css\r\na{\r\n  text-decoration:none;\r\n  color:blue;\r\n  font-weight:bold;\r\n}\r\na:hover{\r\n  text-decoration:underline;\r\n}\r\na.red{\r\n  color:#FF0000;\r\n}\r\na span{\r\n  font-size:1.1em;\r\n}\r\n```\r\nPlease note the usage of *!* to make the nested rule extending the parent one instead of pointing to a child element.\r\n\r\n### Variables Rules also named Mixins\r\nYou may also use define some complete rules as variable we then will call them mixins here is a sample of mixin:\r\n```css\r\n@myMix{\r\n  margin:0;\r\n  padding:0;\r\n  !.big{\r\n    font-weight:bold;\r\n    font-size:1.1em;\r\n  }\r\n}\r\nspan{\r\n  @:@myMix;\r\n}\r\ndiv{\r\n  @!:@myMix;\r\n}\r\n```\r\nWhich will be rendered as:\r\n```css\r\nspan{\r\n  margin:0;\r\n  padding:0;\r\n}\r\ndiv{\r\n  margin:0;\r\n  padding:0;\r\n}\r\ndiv.big{\r\n  font-weight:bold;\r\n  font-size:1.1em;\r\n}\r\n```\r\nPlease note how we _import_ them inside our rules... \r\n\r\n* **@:** make a simple import of the mixin himself but not the nested rules\r\n* **@!:** make a _deep_ import so it import the nested rules too.\r\nThoose may not only used to import mixins but also previously declared rules and even a rule property so you may do something like this:\r\n```css\r\ndiv{\r\n  @:a span;\r\n  font-weight:@:div.big[font-weight];\r\n}\r\n```\r\nto get this:\r\n```css\r\ndiv{\r\n  font-size:1.1em\r\n  font-weight:bold;\r\n}\r\n```\r\n\r\n### Functions\r\nIn fact thoose are not really function but more like mixins with parameters, here's a little example:\r\n```css\r\n@=border(style=solid,color=silver,weight=1px){\r\n  border:@style @color @weight;\r\n}\r\n.box{ @=border(); }\r\n.boxred{ @=border(,red); }\r\n```\r\nThis should give you something like this:\r\n```css\r\n.box{\r\n  border:solid silver 1px;\r\n}\r\n.boxred{\r\n  border:solid red 1px;\r\n}\r\n```\r\n\r\n### Note on parameters in declaration\r\nAs you can see we can assign default values for parameters but this is not an obligation we also may assign empty values as default so writing `@=func(param1,param2=){}` will result in param1 to be mandatory and param2 to be optional and get assigned an empty string as default value.\r\n\r\n### Note on parameters at call time\r\nAs you can see in previous example, we can skip a value to simply use the default parmater value so doing `@=border(,red);` result in first parameter to take the _solid_ value.\r\nIf we want to pass an empty value to the first parameter we should do it like this: `@=border(\"\",red);`\r\n\r\n\r\n### Expressions\r\nSome simple conditional expressions and maths operations can be perform by encapsultating them inside an evaluation block `[ stuff to eval ]`\r\n\r\n### Maths expressions\r\nsimple maths expresssions can be performed inside an evaluation, complex expressions (understand with multiple operators like a+b+c) just don't work out of the box you must encapsultate each expressions inside multiple evaluation blocks.\r\n\r\nUnits are partially supported inside such expressions but no conversion will be done between units so adding some 'em' with some 'px' will only results by keeping the first unit encountered so in this case all values will be considered as 'em'\r\n\r\n**supported operators are +-/&lowast;**\r\n\r\nHere's some example\r\n```css\r\n.testAdd{ width:[10+10]px; }\r\n.testAddUnit{ width:[10px+10em]; }\r\n.testMultipleOps{ width:[5*[10/100]]%;}\r\n```\r\nwill result in:\r\n```css\r\n.testAdd{ width:20px; }\r\n.testAddUnit{ width:20px; }\r\n.testMultipleOps{ width:0.5%;}\r\n```\r\n\r\nMaths expressions may also apply to HEX colors values like #RGB or #RRGGBB. Each operand of the expressions may be a HEX color and/or an int or float value.\r\n\r\n#### Comparison expressions\r\nSimple comparison expressions are possible using a ternary operator like this: `[ a ? b , c ]`\r\nif a is not empty (any value other than a blank string) then b is returned else c is returned, b is not mandatory and may be ommited.\r\n\r\nthe evaluated expression (the a part in `[ a ? b , c ]`) may contain comparison operators: **&gt;**, **&gt;=**, **&lt;**, **&lt;=**, **==**, **!=**, **===**, **!===** with the addition of AND (**&amp;&amp;**), and OR (**||**) operators.\r\n\r\n\r\n\r\n\r\n\r\n## State of the project\r\n * I'm also asking myself about rewriting the whole parser, but my current attempts to do so just make me going nowhere (at least not where i want to go) so this is always something possible but i'll make sure to make the syntax compatible.\r\n * I'm actually using it in my current job on a daily basis and it make my life easyer. I'm actually thinking about a way to propose a complete tool accessible from the web based on the parser as it permits to make your css directly inside your browser without refreshing the pages. And be sure that it really make me work faster!\r\n\r\nHoping this crazy little thing may help someone else, i wish you an happy css making,\r\nregards,\r\n\r\nMalko","google":"UA-38585409-2","note":"Don't delete this file! It's used internally to help with page regeneration."}